<!-- This is where all of our Backbone app will be loaded in to. In main.js, we make sure that this element actually exists before we kick off all of the Backbone stuff -->
<div id="main">
  Our AppView goes here.
</div>

<!-- An example of a dynamic template. The basic approach to get this working in JS is as follows:
  var htmlTemplate = $("#singleSecretTemplate").html();
  var actualTemplate = _.template( htmlTemplate );
  var compiledTemplate = actualTemplate({
    content: "Something"
  });
  // OR...
  var htmlTemplate = $("#singleSecretTemplate").html();
  var actualTemplate = _.template( htmlTemplate );
  var secret = new app.Secret({ content: "I put bleach in your coffee" });
  var compiledTemplate = actualTemplate( secret.toJSON() );

  NOTICE THE ERB TAGS!
  In templates, underscore relies on the fact that all of our dynamic stuff will have ERB-style delimiters to tell it where to put important information
  When we compile this template, it will get the content key of the object it is passed, and will replace the ERB delimiters with the correct details
  Underscore only wants a single percentage sign, but if we only used one, then the Ruby would try and interpret it. Two percentage signs gets Ruby to ignore this particular set of delimiters so that we can use them in templates
  See here for more information: http://underscorejs.org/#template
 -->
<script id="singleSecretTemplate" type="html/template">
  <li><%%= content %></li>
</script>

<!-- Our appViewTemplate just serves as a placeholder, providing places for other views to be loaded in -->
<script id="appViewTemplate" type="html/template">
  <h1>Secrets</h1>

  <div id="secretForm">
    Our SecretInputView should load here
  </div>

  <ul id="secrets">
    SecretViews should go here
  </ul>
</script>

<script id="secretInputViewTemplate" type="html/template">
  <textarea placeholder="Tell me all of your secrets"></textarea>

  <button>Submit</button>
</script>
